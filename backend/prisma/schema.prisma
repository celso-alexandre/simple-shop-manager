generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  // previewFeatures = ["filteredRelationCount"]
}

generator nestgraphql {
  provider                        = "node node_modules/prisma-nestjs-graphql"
  output                          = "../src/prisma/@generated"
  reExport                        = "All"
  fields_Scalars_from             = "graphql-scalars"
  fields_Scalars_input            = true
  fields_Scalars_output           = true
  graphqlScalars_BigInt_name      = "GraphQLBigInt"
  graphqlScalars_BigInt_specifier = "graphql-scalars"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  /// ID
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  /// @Validator.IsEmail()
  email String @unique
  /// Name
  name  String

  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  createdAt DateTime @default(now())
  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  updatedAt DateTime @updatedAt

  /// Relations
  /// @HideField({ output: true })
  providers       Provider[]
  /// @HideField({ output: true })
  products        Product[]
  /// @HideField({ output: true })
  sales           Sale[]
  /// @HideField({ output: true })
  saleItems       SaleItem[]
  /// @HideField({ output: true })
  ProductMovement ProductMovement[]
}

model Provider {
  /// ID
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  /// Name
  name        String  @unique
  /// Document
  document    String? @unique()
  /// @Validator.IsEmail()
  email       String? @unique
  /// Whatsapp
  whatsapp    String?
  /// FK: User.id - User to blame for
  blameUserId String? @db.ObjectId

  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  createdAt DateTime @default(now())
  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  updatedAt DateTime @updatedAt

  /// Relations
  /// @HideField({ output: true })
  blameUser            User?                  @relation(fields: [blameUserId], references: [id])
  /// @HideField({ output: true })
  products             Product[]
  /// @HideField({ output: true })
  saleItems            SaleItem[]
  /// @HideField({ output: true })
  ProductMovementGroup ProductMovementGroup[]
}

model Product {
  /// ID
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  /// Name
  name        String
  /// Brand name
  brandName   String?
  /// Retail price
  priceValue  Int
  /// Cost is post paid? (consigned)
  isPostPaid  Boolean
  /// Cost value
  costValue   Int
  /// Product Controls Qty
  controlsQty Boolean @default(false)
  /// Qty in stock
  qty         Int     @default(0)
  /// FK: Provider.id
  providerId  String? @db.ObjectId
  /// FK: User.id - User to blame for
  blameUserId String? @db.ObjectId

  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  createdAt DateTime @default(now())
  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  updatedAt DateTime @updatedAt

  /// Relations
  /// @HideField({ output: true })
  blameUser       User?             @relation(fields: [blameUserId], references: [id])
  /// @HideField({ output: true })
  provider        Provider?         @relation(fields: [providerId], references: [id])
  /// @HideField({ output: true })
  SaleItems       SaleItem[]
  /// @HideField({ output: true })
  ProductMovement ProductMovement[]
}

enum ProductMovementType {
  INITIAL
  MANUAL
  SALE
  SALE_EDIT
  SALE_DELETE
}

enum ProductMovementGroupType {
  MANUAL
  RECEIVAL
}

model ProductMovementGroup {
  id         String                   @id @default(auto()) @map("_id") @db.ObjectId
  type       ProductMovementGroupType
  providerId String?                  @db.ObjectId
  documentId String?

  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  createdAt DateTime @default(now())

  /// @HideField({ output: true })
  Provider        Provider?         @relation(fields: [providerId], references: [id])
  /// @HideField({ output: true })
  ProductMovement ProductMovement[]

  @@unique([type, providerId, documentId])
}

model ProductMovement {
  /// ID
  id                     String              @id @default(auto()) @map("_id") @db.ObjectId
  /// FK: Product.id
  productId              String              @db.ObjectId
  /// Sale
  saleItemId             String?             @db.ObjectId
  /// Type of movement
  type                   ProductMovementType
  /// Quantity (positive for input, negative for output)
  quantity               Int
  /// FK: User.id - User to blame for
  blameUserId            String?             @db.ObjectId
  productMovementGroupId String?             @db.ObjectId

  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  createdAt DateTime @default(now())
  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  updatedAt DateTime @updatedAt

  /// Relations
  /// @HideField({ output: true })
  blameUser            User?                 @relation(fields: [blameUserId], references: [id])
  /// @HideField({ output: true })
  Product              Product               @relation(fields: [productId], references: [id])
  /// @HideField({ output: true })
  SaleItem             SaleItem?             @relation(fields: [saleItemId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  /// @HideField({ output: true })
  ProductMovementGroup ProductMovementGroup? @relation(fields: [productMovementGroupId], references: [id])
}

model Sale {
  /// ID
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  /// Date Time
  date           DateTime
  /// FK: User.id - User to blame for
  blameUserId    String?  @db.ObjectId
  /// Grand Total
  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  totalValue     Int
  /// Total Cost
  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  totalCostValue Int

  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  createdAt DateTime @default(now())
  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  updatedAt DateTime @updatedAt

  /// Relations
  /// @HideField({ output: true })
  blameUser User?      @relation(fields: [blameUserId], references: [id])
  /// @HideField({ output: true })
  saleItems SaleItem[]
}

model SaleItem {
  /// ID
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  /// FK: Product.id
  productId      String  @db.ObjectId
  /// Quantity
  quantity       Int
  /// Sold Price (usually the same as Product.priceValue)
  totalValue     Int
  /// Cost value (the same from Product.costValue)
  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  totalCostValue Int
  /// isPostPaid (usually the same as Product.isPostPaid)
  costIsPostPaid Boolean

  /// FK: Sale.id
  saleId             String  @db.ObjectId
  /// FK: Provider.id (usually the same as Product.providerId)
  providerId         String? @db.ObjectId
  /// FK: User.id - User to blame for
  blameUserId        String? @db.ObjectId
  /// FK: SalePaidCost.id
  salePaidCostId     String? @db.ObjectId
  /// Related salePaidCostId payment marked this one to be paid
  saleCostIsSelected Boolean @default(false)
  /// Related salePaidCostId payment were made
  saleCostIsPaid     Boolean @default(false)

  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  createdAt DateTime @default(now())
  /// @HideField({ match: '@(*Update*|*Create*)Input' })
  updatedAt DateTime @updatedAt

  /// Relations
  /// @HideField({ output: true })
  blameUser       User?             @relation(fields: [blameUserId], references: [id])
  /// @HideField({ output: true })
  sale            Sale?             @relation(fields: [saleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  /// @HideField({ output: true })
  provider        Provider?         @relation(fields: [providerId], references: [id])
  /// @HideField({ output: true })
  product         Product           @relation(fields: [productId], references: [id])
  /// @HideField({ output: true })
  ProductMovement ProductMovement[]

  @@unique([costIsPostPaid, productId, saleId])
}
